version: '3.8'

services:
  # FastAPI service with Gunicorn (Production with secure credentials)
  mental-wellness-api:
    build: .
    container_name: mental-wellness-api
    ports:
      - "8000:8000"
    volumes:
      # Mount local data directory to container
      - ./data:/app/data
      # Mount local models directory to persist trained models
      - ./models:/app/models
      # Mount local output directory for results
      - ./output:/app/output
      # Mount config directory
      - ./mental_wellness_model/config:/app/mental_wellness_model/config
    environment:
      - PYTHONPATH=/app
      - GUNICORN_RELOAD=false  # Set to true for development
      - ENVIRONMENT=production
      # üîê SECURE CREDENTIALS - Set these environment variables:
      # Option 1: Full JSON credentials (recommended)
      # - GOOGLE_CREDENTIALS_JSON=${GOOGLE_CREDENTIALS_JSON}
      
      # Option 2: Individual credential fields (alternative)
      # - GCS_PROJECT_ID=${GCS_PROJECT_ID:-mentalwellness-473814}
      # - GCS_CLIENT_EMAIL=${GCS_CLIENT_EMAIL}
      # - GCS_PRIVATE_KEY_ID=${GCS_PRIVATE_KEY_ID}
      # - GCS_PRIVATE_KEY=${GCS_PRIVATE_KEY}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Alternative: Use Docker secrets for even better security
    # secrets:
    #   - gcs_credentials

  # Development API service (with auto-reload)
  mental-wellness-api-dev:
    build: .
    container_name: mental-wellness-api-dev
    ports:
      - "8001:8000"
    volumes:
      # Mount the entire project for development
      - .:/app
    environment:
      - PYTHONPATH=/app
      - GUNICORN_RELOAD=true
    command: ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    restart: unless-stopped

  # CLI service (original functionality)
  mental-wellness-cli:
    build: .
    container_name: mental-wellness-model
    volumes:
      # Mount local data directory to container
      - ./data:/app/data
      # Mount local models directory to persist trained models
      - ./models:/app/models
      # Mount local output directory for results
      - ./output:/app/output
      # Mount config directory
      - ./mental_wellness_model/config:/app/mental_wellness_model/config
    environment:
      - PYTHONPATH=/app
    # Override the default CMD - this allows you to run different commands
    # Example usage:
    # docker-compose run mental-wellness-cli python cli.py train
    # docker-compose run mental-wellness-cli python cli.py predict --model /app/models/model.joblib --age 25
    stdin_open: true
    tty: true
    command: ["python", "cli.py", "--help"]

  # Alternative service for interactive development
  mental-wellness-dev:
    build: .
    container_name: mental-wellness-dev
    volumes:
      # Mount the entire project for development
      - .:/app
    environment:
      - PYTHONPATH=/app
    command: ["tail", "-f", "/dev/null"]  # Keep container running
    stdin_open: true
    tty: true

# Create named volumes for persistent data storage (optional)
volumes:
  models_data:
    driver: local
  training_data:
    driver: local
  output_data:
    driver: local

# üîê Uncomment for Docker secrets approach (highest security)
# secrets:
#   gcs_credentials:
#     file: ./credentials/mentalwellness-473814-key.json